S -> Expr
Expr -> “(” RPN “)”
RPN -> opernad “ “ RPNExpr | “MEM”
RPNExpr -> operand “ “ operator | unaryOperator
operand -> Expr | “Number”
operator -> "+" | "-" | "*" | "/" | "%" | "|" | "^"
unaryOperator -> "RES" | "IF" | "THEN" | "ELSE" | "DO" | "FOR" | "MEM"

FIRST(S) = {"("}
FIRST(Expr) = {"("}
FIRST(RPN) = { "(", "Number", "MEM"}
FIRST(RPNExpr) = { "(", "Number", "RES", "IF", "THEN", "ELSE", "DO", "FOR", "MEM"}
FIRST(operand) = {"(", Number }
FIRST(operator) = {"+", "-", "*", "/", "%", "|", "^" }
FIRST(unaryOperator) = {"RES", "IF", "THEN", "ELSE", "DO", "FOR", "MEM"}

FOLLOW(S) = {$}
FOLLOW(Expr) = {$, " "}
FOLLOW(RPN) = {")"}
FOLLOW(RPNExpr) = {")"}
FOLLOW(operand) = {" "}
FOLLOW(operator) = {")"}
FOLLOW(unaryOperator) = {")"}